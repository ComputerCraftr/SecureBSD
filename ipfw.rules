#!/bin/sh

# Exit on errors and undefined variables
set -eu

# Define the firewall command
fwcmd="/sbin/ipfw"

# Define external interface, internal interface, and Suricata divert port
ext_if="em0"            # Adjust as needed for your external interface
int_if="em0"            # Adjust to your internal network interface
divert_port="8000"      # Suricata divert port
ssh_ips="any"           # List of allowed SSH source IPs
ssh_port="2222"         # SSH port to allow
user_tcp_ports="80,443" # User TCP ports to allow

# Define martian IP ranges to deny
martians_ip4="0.0.0.0/8,\
127.0.0.0/8,\
169.254.0.0/16,\
192.0.2.0/24,\
192.88.99.0/24,\
198.18.0.0/15,\
198.51.100.0/24,\
203.0.113.0/24,\
204.152.64.0/23,\
224.0.0.0/4,\
233.252.0.0/24,\
240.0.0.0/4,\
255.255.255.255/32"
martians_ip6="::/128,\
::1/128,\
100::/64,\
2001::/32,\
2001:20::/28,\
2001:db8::/32"
martians_ip6_2="2002::/16,\
3fff::/20,\
5f00::/16,\
fe80::/10,\
ff00::/8"

# Check if IPv6 is available by detecting any IPv6 addresses
ipv6_available=$(ifconfig | grep -qF "inet6" && echo 1 || echo 0)

# Flush existing rules
${fwcmd} -q flush

#################################
# Loopback and IPv6 Traffic
#################################
# Allow all traffic on the loopback interface (lo0)
${fwcmd} add 100 allow ip from any to any via lo0

# Deny traffic to and from the IPv4 loopback network (127.0.0.0/8)
${fwcmd} add 200 deny ip from any to 127.0.0.0/8
${fwcmd} add 300 deny ip from 127.0.0.0/8 to any

# IPv6 loopback and network functionality rules (if IPv6 is available)
if [ "$ipv6_available" -eq 1 ]; then
    # Deny traffic to and from the IPv6 loopback address (::1)
    ${fwcmd} add 400 deny ip from any to ::1
    ${fwcmd} add 500 deny ip from ::1 to any

    # Deny routing header type 0 (RH0) to prevent amplification and redirection attacks (RFC5095)
    ${fwcmd} add 600 deny log ip6 from any to any ext6hdr rthdr0

    # Deny fragmented ICMPv6 Neighbor Discovery Protocol (NDP) packets to prevent DoS attacks (RFC6980)
    ${fwcmd} add 700 deny log ipv6-icmp from any to any ext6hdr frag icmp6types 130,131,132,133,134,135,136,143

    # Allow IPv6 Duplicate Address Detection (DAD) packets
    ${fwcmd} add 800 allow ipv6-icmp from :: to ff02::/16

    # Allow ICMPv6 Router Solicitation (RS), Router Advertisement (RA), Neighbor Solicitation (NS), and Neighbor Advertisement (NA) for link-local traffic
    ${fwcmd} add 900 allow ipv6-icmp from fe80::/10 to fe80::/10
    ${fwcmd} add 1000 allow ipv6-icmp from fe80::/10 to ff02::/16

    # Allow ICMPv6 Neighbor Solicitation (NS) and Neighbor Advertisement (NA) for address resolution (unicast, link-local, and multicast)
    ${fwcmd} add 1100 allow ipv6-icmp from any to any icmp6types 135,136
fi

#################################
# Fail2Ban Protection
#################################
# Table to hold banned IPs
${fwcmd} table fail2ban create or-flush type addr

# Drop traffic from the Fail2Ban table
${fwcmd} add 1200 deny log ip from 'table(fail2ban)' to any

#################################
# Fragmented Packet Reassembly
#################################
# Reassemble fragmented packets before further processing
${fwcmd} add 1300 reass ip from any to any in

#################################
# Anti-Spoofing and Recon Prevention
#################################
# Block packets with IP options to prevent IP spoofing and source routing attacks
${fwcmd} add 1400 deny log ip from any to any ipoptions ssrr
${fwcmd} add 1410 deny log ip from any to any ipoptions lsrr
${fwcmd} add 1420 deny log ip from any to any ipoptions rr
${fwcmd} add 1430 deny log ip from any to any ipoptions ts

# Anti-spoofing: Deny traffic with invalid source addresses (not verifiable via reverse path)
${fwcmd} add 1500 deny log ip from any to any not verrevpath in

#################################
# ICMP and ICMPv6 Rules for Network Functionality
#################################
# Allow ICMPv4 Destination Unreachable and Time Exceeded
${fwcmd} add 1600 allow icmp from any to any icmptypes 3,11 in

# Allow all ICMPv4 outbound
${fwcmd} add 1700 allow icmp from any to any out

# Allow ICMPv6 Destination Unreachable, Packet Too Big, Time Exceeded, and RA
if [ "$ipv6_available" -eq 1 ]; then
    ${fwcmd} add 1800 allow ipv6-icmp from any to any icmp6types 1,2,3,133,134 in

    # Allow all ICMPv6 outbound
    ${fwcmd} add 1900 allow ipv6-icmp from any to any out
fi

#################################
# Flood Protection and Traffic Shaping
#################################
# Dummynet pipe to limit ICMPv4/ICMPv6 bandwidth
${fwcmd} pipe 1 config bw 100Kbit/s queue 1 droptail

# Limit ICMPv4 echo requests and replies (ping flood protection)
${fwcmd} add 2000 pipe 1 icmp from any to any icmptypes 8,0 in

# IPv6 ICMPv6 echo requests and replies (ping flood protection)
if [ "$ipv6_available" -eq 1 ]; then
    ${fwcmd} add 2100 pipe 1 ipv6-icmp from any to any icmp6types 128,129 in
fi

# Deny all other ICMPv4 and ICMPv6 traffic
${fwcmd} add 2200 deny log icmp from any to any in
if [ "$ipv6_available" -eq 1 ]; then
    ${fwcmd} add 2300 deny log ipv6-icmp from any to any in
fi

#################################
# Suricata Traffic Diversion (If Enabled)
#################################
if [ "$divert_port" != "none" ]; then
    # Divert all traffic to Suricata for inline IPS processing
    ${fwcmd} add 2400 divert "$divert_port" ip from any to any
fi

#################################
# Stateful Traffic Handling
#################################
# Check the state of all connections to allow established connections
${fwcmd} add 2500 check-state

# Deny stateless inbound martians
${fwcmd} add 2600 deny log ip from "$martians_ip4" to any in
${fwcmd} add 2610 deny log ip from any to "$martians_ip4" in
if [ "$ipv6_available" -eq 1 ]; then
    ${fwcmd} add 2700 deny log ip6 from "$martians_ip6" to any in
    ${fwcmd} add 2710 deny log ip6 from any to "$martians_ip6" in
    ${fwcmd} add 2720 deny log ip6 from "$martians_ip6_2" to any in
    ${fwcmd} add 2730 deny log ip6 from any to "$martians_ip6_2" in
fi

#################################
# Inbound Traffic (User-Defined Services)
#################################
# Dummynet pipe to limit IPv4 bandwidth
${fwcmd} pipe 2 config bw 1Mbit/s buckets 4096 queue 50 mask src-ip 0xffffffff dst-ip 0xffffffff

# Allow new SSH connections from allowed source IPs to the firewall
${fwcmd} add 2800 pipe 2 ip4 from "$ssh_ips" to me "$ssh_port" tcpflags syn,!ack,!fin,!rst in limit dst-addr 2

# Allow HTTP/HTTPS connections to the firewall, with source IP limit for DoS mitigation
${fwcmd} add 2900 pipe 2 ip4 from any to me "$user_tcp_ports" tcpflags syn,!ack,!fin,!rst in limit src-addr 10

# IPv6 SSH and HTTP/HTTPS rules (if IPv6 is available)
if [ "$ipv6_available" -eq 1 ]; then
    # Dummynet pipe to limit IPv6 bandwidth
    ${fwcmd} pipe 3 config bw 1Mbit/s buckets 4096 queue 50 mask src-ip6 60 dst-ip6 60

    ${fwcmd} add 3000 pipe 3 ip6 from "$ssh_ips" to me6 "$ssh_port" tcpflags syn,!ack,!fin,!rst in limit dst-addr 2
    ${fwcmd} add 3100 pipe 3 ip6 from any to me6 "$user_tcp_ports" tcpflags syn,!ack,!fin,!rst in limit src-addr 10
fi

#################################
# Inbound Internal Traffic
#################################
# Deny any inbound traffic to me that hasn't been explicitly allowed
${fwcmd} add 3200 deny log ip from any to me in
if [ "$ipv6_available" -eq 1 ]; then
    ${fwcmd} add 3300 deny log ip from any to me6 in
fi

# Allow all traffic passing through the internal interface
${fwcmd} add 3400 allow ip from any to any tcpflags syn,!ack,!fin,!rst in via "$int_if" keep-state
${fwcmd} add 3410 allow ip from any to any proto udp in via "$int_if" keep-state

#################################
# Outbound Traffic
#################################
# Allow all outbound traffic with stateful handling
${fwcmd} add 3500 allow ip from any to any out keep-state

#################################
# Final Rule: Deny all other traffic
#################################
# Deny any traffic that hasn't been explicitly allowed
${fwcmd} add 65534 deny log ip from any to any
